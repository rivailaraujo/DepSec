package com.rivail.services

import groovy.json.JsonOutput
import groovy.json.JsonSlurper
import io.micronaut.http.HttpRequest
import io.micronaut.http.MediaType
import io.micronaut.http.client.HttpClient
import io.micronaut.http.client.annotation.Client
import jakarta.inject.Singleton


@Singleton
class VulnerabilityScannerService {

    final HttpClient client
    final String authHeader

    VulnerabilityScannerService(@Client("https://ossindex.sonatype.org") HttpClient client) {
        this.client = client
        String username = "araujorivail@outlook.com"
        String token = "c9e930a60a9de130582607f97b57c9f14ca48a51"
        String auth = "${username}:${token}"
        this.authHeader = "Basic " + Base64.getEncoder().encodeToString(auth.getBytes("UTF-8"))
    }

    List scan(String packageName, String version = "latest") {
        try {
            def coordinates = ["pkg:npm/${packageName}@${version}"]
            def payload = JsonOutput.toJson([coordinates: coordinates])

            def request = HttpRequest.POST("/api/v3/component-report", payload)
                    .contentType(MediaType.APPLICATION_JSON_TYPE)
                    .header("Authorization", authHeader)

            def response = client.toBlocking().retrieve(request)

            def data = new JsonSlurper().parseText(response)

            return data.collect { component ->
                [
                        package: component.coordinates?.toString(),
                        vulnerabilities: component.vulnerabilities ?: []
                ]
            }

        } catch (Exception e) {
            println "❌ Erro na análise: ${e.message}"
            return []
        }
    }
}
